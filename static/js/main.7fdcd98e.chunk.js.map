{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.module.css","components/Notification/Notification.module.css","components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Notification/Notification.js","App.js","index.js"],"names":["module","exports","FeedbackOptions","handleClick","e","preventDefault","props","buttonClickHandler","currentTarget","innerText","this","stateArray","map","item","className","styles","button","type","onClick","shortid","generate","Component","Statistics","state","totalFeedback","totalAndPositiveFeedback","total","positiveFeedback","isNaN","Notification","message","notification","FidbackVidjet","good","neutral","bad","option","setState","prevState","countTotalFeedback","Object","values","reduce","feedback","value","countPositiveFeedbackPercentage","keys","console","log","title","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oIACAA,EAAOC,QAAU,CAAC,OAAS,kC,mBCA3BD,EAAOC,QAAU,CAAC,aAAe,qC,4KCuClBC,E,4MAhCXC,YAAc,SAAAC,GACVA,EAAEC,iBAEF,EAAKC,MAAMC,mBAAmBH,EAAEI,cAAcC,Y,4CAGlD,WAAU,IAAD,OACL,OACI,qCACI,uDACCC,KAAKJ,MAAMK,WAAWC,KAAI,SAAAC,GAAI,OAC3B,wBACIC,UAAWC,IAAOC,OAClBC,KAAK,SAELC,QAAS,EAAKf,YAJlB,SAMKU,GAHIM,IAAQC,sB,GAhBPC,aCkCfC,E,4JAlCX,WACI,IAAMC,EAAQb,KAAKJ,MAAMiB,MACnBZ,EAAaD,KAAKJ,MAAMK,WACxBa,EAAgBd,KAAKJ,MAAMmB,yBAAyBC,MACpDC,EAAmBjB,KAAKJ,MAAMmB,yBAAyBE,iBAC7D,OACI,qCACI,4CACChB,EAAWC,KAAI,SAAAC,GAAI,OAChB,8BAA6BA,EAA7B,KAAqCU,EAAMV,KAAnCM,IAAQC,eAEpB,wCAAWI,KACX,oDAAuBI,MAAMD,GAAoB,EAAIA,EAArD,c,GAdSN,a,iBCMVQ,EANM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OACI,mBAAGhB,UAAWC,IAAOgB,aAArB,SAAoCD,KCkD7BE,G,kNAhDbT,MAAQ,CACNU,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGP5B,mBAAqB,SAAA6B,GACnB,EAAKC,UAAS,SAAAC,GACZ,OAAO,eACJF,EAASE,EAAUF,GAAU,O,EAKpCG,mBAAqB,WACnB,IAAMb,EAAQc,OAAOC,OAAO,EAAKlB,OAAOmB,QAAO,SAACC,EAAUC,GAAX,OAAqBD,EAAWC,KAC/E,OAAO,EAAKC,gCAAgCnB,I,EAG9CmB,gCAAkC,SAACnB,GAEjC,MAAO,CAACA,MAAOA,EAAOC,iBADsB,IAAlB,EAAKJ,MAAMU,KAAcP,I,4CAIrD,WACE,IAAMf,EAAa6B,OAAOM,KAAKpC,KAAKa,OAC9BE,EAA2Bf,KAAK6B,qBAEtC,OADAQ,QAAQC,IAAIvB,EAAyBC,OAEnC,0BAASZ,UAAU,UAAUmC,MAAM,GAAnC,UACE,cAAC,EAAD,CACEtC,WAAYA,EACZJ,mBAAoBG,KAAKH,qBAE1BkB,EAAyBC,MAAQ,EAChC,cAAC,EAAD,CACEH,MAAOb,KAAKa,MACZZ,WAAYA,EACZc,yBAA0BA,IAG5B,cAAC,EAAD,CAAcK,QAAS,6B,GA1CLT,c,MCF5B6B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7fdcd98e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__2o4hF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notification\":\"Notification_notification__1qxDM\"};","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport shortid from 'shortid';\r\n\r\nimport styles from './FeedbackOptions.module.css';\r\n\r\nclass FeedbackOptions extends Component {\r\n\r\n    handleClick = e => {\r\n        e.preventDefault();\r\n\r\n        this.props.buttonClickHandler(e.currentTarget.innerText)\r\n    };\r\n    \r\n    render() {\r\n        return (\r\n            <>\r\n                <h1>Please leave feedback</h1>\r\n                {this.props.stateArray.map(item => \r\n                    <button\r\n                        className={styles.button}\r\n                        type=\"button\"\r\n                        key={shortid.generate()}\r\n                        onClick={this.handleClick}\r\n                    >\r\n                        {item}\r\n                    </button>\r\n                )}\r\n            </>\r\n        );\r\n    };\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n    StateArray: PropTypes.arrayOf(\r\n        PropTypes.string.isRequired\r\n    ).isRequired,\r\n    ButtonClickHandler: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default FeedbackOptions;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport shortid from 'shortid';\r\n\r\nclass Statistics extends Component {\r\n\r\n    render() {\r\n        const state = this.props.state;\r\n        const stateArray = this.props.stateArray;\r\n        const totalFeedback = this.props.totalAndPositiveFeedback.total\r\n        const positiveFeedback = this.props.totalAndPositiveFeedback.positiveFeedback\r\n        return (\r\n            <>\r\n                <h2>Statistics</h2>\r\n                {stateArray.map(item => \r\n                    <p key={shortid.generate()}>{item}: {state[item]}</p>\r\n                )}\r\n                <p>Total: {totalFeedback}</p>\r\n                <p>Positive Feedback: {isNaN(positiveFeedback) ? 0 : positiveFeedback}%</p>\r\n                \r\n            </>\r\n        );\r\n    };\r\n};\r\n\r\nStatistics.propTypes = {\r\n    State: PropTypes.shape({\r\n        good: PropTypes.number.isRequired,\r\n        neutral: PropTypes.number.isRequired,\r\n        bad: PropTypes.number.isRequired\r\n    }),\r\n    StateArray: PropTypes.arrayOf(\r\n        PropTypes.string.isRequired\r\n    ).isRequired,\r\n    TotalAndPositiveFeedback: PropTypes.shape({\r\n        total: PropTypes.number.isRequired,\r\n        PositiveFeedback: PropTypes.number.isRequired\r\n    }),\r\n}\r\n\r\nexport default Statistics;","import React from 'react';\r\n\r\nimport styles from './Notification.module.css';\r\n\r\nconst Notification = ({message}) => {\r\n    return (\r\n        <p className={styles.notification}>{message}</p>\r\n    )\r\n}\r\n\r\nexport default Notification;","import React, { Component } from \"react\";\r\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\r\nimport Statistics from './components/Statistics/Statistics';\r\nimport Notification from './components/Notification/Notification';\r\n\r\nimport './App.css';\r\n\r\nclass FidbackVidjet extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  buttonClickHandler = option => {\r\n    this.setState(prevState => {\r\n      return {\r\n        [option]: prevState[option] + 1,\r\n      };\r\n    });\r\n  };\r\n\r\n  countTotalFeedback = () => {\r\n    const total = Object.values(this.state).reduce((feedback, value) => feedback + value)\r\n    return this.countPositiveFeedbackPercentage(total)\r\n  };\r\n\r\n  countPositiveFeedbackPercentage = (total) => {\r\n    const positiveFeedback = (this.state.good * 100) / total\r\n    return {total: total, positiveFeedback: positiveFeedback}\r\n  };\r\n  \r\n  render() {\r\n    const stateArray = Object.keys(this.state);\r\n    const totalAndPositiveFeedback = this.countTotalFeedback();\r\n    console.log(totalAndPositiveFeedback.total)\r\n    return (\r\n      <section className=\"section\" title=\"\">\r\n        <FeedbackOptions\r\n          stateArray={stateArray}\r\n          buttonClickHandler={this.buttonClickHandler}\r\n        />\r\n        {totalAndPositiveFeedback.total > 0 ?\r\n          <Statistics\r\n            state={this.state}\r\n            stateArray={stateArray}\r\n            totalAndPositiveFeedback={totalAndPositiveFeedback}\r\n          />\r\n          :\r\n          <Notification message={\"No feedback given\"}/>\r\n        }\r\n      </section>\r\n    )\r\n  };\r\n};\r\n\r\nexport default FidbackVidjet;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport FidbackVidjet from './App';\r\nimport 'modern-normalize/modern-normalize.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <FidbackVidjet />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}